#!/usr/bin/env python3

import sys
import argparse

gpu_choices = ["A100", "rtx_3090", "rtx_2080"]
parser = argparse.ArgumentParser()
parser.add_argument('--cpus',    '-c',   type=int, nargs='?', default=1)
parser.add_argument('--gpus',    '-g',   type=int, nargs='?')
parser.add_argument('--hours',   '-t',   type=int, nargs='?', default=1,  help="time in hours")
parser.add_argument('--mins',            type=int, nargs='?', default=0,  help="time in mins")
parser.add_argument('--duration',        type=str, nargs='?', default=None,  help="duration of job")
parser.add_argument('--memory',  '-m',   type=int, nargs='?', default=22, help="memory in gp")
parser.add_argument('--account', '-a',   type=str, nargs='?',             help="hpc project code")
parser.add_argument('--queue',   '-q',   type=str, nargs='?',             help="queue")
parser.add_argument('--gputype',         type=str, nargs='*', choices=gpu_choices, help="Could be {rtx_2080, rtx_3090, A100}, can give a space-separated list --gputype rtx_2080 rtx_3090")
parser.add_argument('--exclude_40G_A100', action='store_true', help="Scheduler doesn't know the difference between the 40G and 80G A100s, but some code will only run on the 80G cards")
parser.add_argument('--exclude_node', type=str, nargs='?')
parser.add_argument('--interactive', action='store_true', help="Not used by the user, used internally to error when lint is called with a --cmd argument")
parser.add_argument('--exclude-40G-a100s', action='store_true', help="Scheduler doesn't know the difference between the 40G and 80G A100s, but some code will only run on the 80G cards")
parser.add_argument('--exclude-a100s', action='store_true', help='use when you have a small job to avoid hogging A100s')
parser.add_argument('--exclude-80G-a100s', action='store_true', help='use when you have a small job to avoid hogging A100s')
parser.add_argument('--exclude-2080s', action='store_true', help='avoid RTX-2080s')
parser.add_argument('--exclude-nodes', default='', type=str)

# remove args after --cmd, if present
if "--cmd" in sys.argv:
    cmd_idx = sys.argv.index('--cmd')
    arglist = sys.argv[1:cmd_idx]
    #If we have --cmd, then we're being called by lcmd/lrun, with lscript and there may be extra command
    #line arguments that only lscript knows how to parse.
    args,_ = parser.parse_known_args(arglist)
    if args.interactive:
        raise Exception("lint was passed a --cmd, but it cannot take a cmd")
else:
    arglist = sys.argv[1:]
    #If we don't have --cmd, then we're being called by lint (with no lscript), so we should know
    #how to parse all arguments.
    args = parser.parse_args(arglist)

cmd = ""

if args.duration is None:
  days = args.hours//24
  hours = args.hours % 24
  mins = args.mins
  cmd = cmd + f" --time={days}-{hours}:{mins}:00"
else:
  cmd = cmd + f"--time={args.duration}"

cmd = cmd + f" --cpus-per-task={args.cpus}"

if args.memory is not None:
    cmd = cmd + f" --mem={args.memory}G"

if args.account is not None:
    cmd = cmd + f" --account={args.account}"

if args.queue is not None:
    cmd = cmd + f" --partition={args.queue}"

if args.gpus is not None:
    if args.gputype is None:
        cmd = cmd + f" --gpus={args.gpus}"
    elif 1==len(args.gputype):
        cmd = cmd + f" --gpus={args.gputype[0]}:{args.gpus}"
    else:
        #Order of GPUs determines which one the scheduler will prefer, if both are open.
        #Prefers the last GPU in the list, so we put the least powerful GPU last.
        gpu_types = [gpu for gpu in gpu_choices if gpu in args.gputype]
        cmd = cmd + " --gpus={" + ",".join(f"{gpu}:{args.gpus}" for gpu in gpu_types) + "}"

# find out the gpu for each node with the following bash cmd:
# `sinfo -p cnu -o "%50N %10c %20m %30G"`
excludes = []
if args.exclude_a100s:
    excludes += [31, 32, 38, 39]
if args.exclude_80G_a100s:
    excludes += [38, 39]
if args.exclude_40G_A100 or args.exclude_40G_a100s:
    excludes += [31, 32]
if args.exclude_2080s:
    excludes += [4,6,16,17]
if args.exclude_nodes != '':
    excludes += [int(x) for x in args.exclude_nodes.split(',')]

if args.exclude_node is not None:
    cmd = cmd + f" --exclude={args.exclude_node}"

cmd += ' --exclude=' + ','.join([f"bp1-gpu{n:03d}" for n in set(excludes)])
print(cmd + " ")
